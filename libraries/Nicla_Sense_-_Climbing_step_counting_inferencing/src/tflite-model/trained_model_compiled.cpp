/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 16.09.2022 09:29:09

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 368;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,143 } };
const TfArray<1, float> quant0_scale = { 1, { 0.083900958299636841, } };
const TfArray<1, int> quant0_zero = { 1, { 73 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[20*143] = { 
  -65, -61, -53, 11, -15, 8, -74, -64, -70, 13, 79, -44, -60, 77, 36, 86, 80, -28, 60, -56, 76, -79, 82, -64, -51, -51, -80, 36, -34, -31, -55, -78, 17, 77, 26, -36, -45, 59, 25, -9, 60, 86, 58, 45, -72, 26, -20, 41, -40, 14, 43, 69, -73, 69, 12, 19, 10, -17, -12, 3, 10, -23, -45, -23, -41, -24, 42, 40, -2, -66, 75, -52, -8, 7, -16, 81, 52, 65, -7, 51, 57, 39, 11, 57, -6, 24, -33, 28, -14, 61, 71, -67, 12, 45, 1, -29, 18, 34, 3, 84, -85, -45, 58, -42, -15, -71, 31, -68, 13, 26, 15, -12, -43, -10, -25, 4, 48, 12, -36, -17, 68, 42, 46, 80, 77, -81, 70, -47, 63, -63, 76, -83, -23, -45, 58, -28, -32, 88, 12, 52, 60, -31, -84, 
  -6, 2, 10, -50, 0, 67, 44, 74, -81, 44, 57, -56, -45, -76, -54, -43, -44, -83, 57, 38, -13, -59, -84, -76, 51, -63, 14, 38, -52, 1, 64, 67, -87, -39, -108, 77, -42, 29, 37, -58, -57, 5, 1, -15, -88, -103, 9, -6, -24, -69, 44, 84, -94, -50, 82, -33, -127, 105, -38, -88, 61, 12, -47, 43, -44, -50, 31, -58, 57, -17, -84, 49, -19, -44, 51, 14, -63, -77, 50, -75, 72, -47, -70, -82, -35, -8, -66, 73, -31, -81, 78, 0, -70, -57, -84, 78, 8, 79, -83, -89, -15, 74, -55, 57, -59, 66, -67, 13, -27, -36, -24, 0, 45, -24, 61, -72, -76, -80, -70, 9, 45, 13, 8, -64, 25, -87, -94, 61, 47, -46, 3, -59, -85, 7, -9, 45, 26, 55, -32, 21, 29, 25, -10, 
  -1, -86, -69, 37, 0, 20, -84, -21, -55, 9, -29, -21, -65, -19, 46, -74, -60, -21, 73, -84, 59, -12, -44, 17, -39, 73, 9, -45, -14, -53, -57, 66, -77, 35, -59, 28, 21, -12, -43, -55, 71, -16, -3, -7, -21, 9, 61, -22, 88, -69, 81, -2, 16, -61, 56, 45, 54, 23, 27, 65, 31, -84, -77, 30, 40, -65, -42, 7, 46, 79, 64, 38, -33, 84, -30, 51, -61, -22, -65, -21, 21, -41, -63, 28, 72, 86, -8, 46, -62, 39, -28, 22, -84, -28, 86, 30, 59, -9, 42, -15, -64, 20, 55, -19, 50, 69, -55, 75, -12, -61, -4, 32, 18, -34, 79, 14, 61, -57, -61, -71, 88, 70, 50, 75, -72, -37, -24, -70, -67, -12, 43, -10, 4, 36, 44, -10, -33, -32, 12, 54, -10, -30, 10, 
  -95, -33, -68, 32, 20, 23, -63, 10, 10, 72, -2, -86, 0, 30, 2, -49, -30, -25, 77, 46, -92, -61, 79, -20, -17, 75, -1, -34, 61, 14, 1, 60, 5, -84, -30, 63, 17, -22, -71, 1, 1, -20, -22, 47, -75, -46, 57, -71, 45, 49, 69, -54, -39, 74, -85, -59, 37, 6, 57, -62, -86, -49, -21, 53, -50, 22, -27, -87, -79, 37, 46, -26, 5, -48, 16, -58, -69, 35, -43, 56, 56, -44, -43, 16, 51, 53, 73, -40, 74, -27, 2, -53, -29, 61, 57, -68, -61, -31, 55, -26, -39, -55, -68, 36, 13, 21, -7, -59, 33, -71, 9, -80, -24, -9, 19, 56, -10, 17, 16, 2, 36, -113, 83, -44, -23, -63, -59, 72, -83, -47, -48, -40, 60, 38, -57, -30, 71, 13, -72, 55, 25, 78, 12, 
  1, 49, -53, 55, 28, 78, -67, -34, 17, 27, 29, 3, -6, -18, -75, -4, -43, -39, 20, 16, 14, -36, -34, 20, -10, -40, 76, 36, 80, -1, 6, -47, -44, 49, -45, -33, 50, 45, -64, -45, 37, -72, -58, -23, -82, -4, 73, 66, 47, 28, 37, -79, 17, -48, 56, -19, 52, -68, 37, 25, -62, 19, -29, -51, 84, -6, 15, -57, -18, -85, -35, -6, -11, 18, 19, 33, 28, 22, -7, 81, -20, 44, 50, -53, 54, -3, -14, -40, -64, 75, -59, 36, 32, -34, 81, 0, -54, 35, 86, 10, -47, -14, -53, 85, -31, 18, -67, -28, -23, 49, 37, 60, -44, 79, -40, 17, 50, 82, -74, 68, -50, -8, -72, -14, 74, 75, 85, -77, -6, 29, -48, 24, 8, 35, 47, -62, -61, -88, 85, 23, 20, 76, 15, 
  74, -19, -31, 15, 29, 62, 45, 41, 22, -44, -34, -26, 113, -39, 84, 41, -15, 56, 75, 89, -22, -58, 10, -24, -92, 66, 42, -13, 72, 49, 59, 113, 23, 117, -14, 44, 16, 55, 121, -20, 21, 42, 96, 77, 2, 56, -65, 71, 8, 28, 13, 20, 0, -17, 3, 86, 72, -58, 88, 46, 8, 12, 88, 25, 39, 14, 55, 35, 10, -70, -91, -43, -50, -87, -49, -86, 16, 88, 31, 33, -84, 15, 19, -3, 81, 77, -33, 19, -63, -24, 21, 18, -83, 12, -69, -2, 33, 75, -68, 48, 3, -6, 23, 60, 73, -37, 2, -54, -28, 6, -11, 60, 35, -9, 41, -46, 10, -42, 51, -81, -64, -36, 28, 65, 24, 56, 55, -42, -37, 84, -28, 43, -10, -48, 53, -64, -12, 38, 2, 28, -6, 3, -47, 
  -59, 92, -9, -16, -20, 39, 38, -10, -29, 65, -53, -59, -78, -59, 91, 36, -2, 52, 32, -23, 26, 2, 87, -92, 6, 11, -29, 28, 36, -11, 53, -11, -39, 0, -52, -44, 34, 75, 22, -16, 80, 11, -66, -32, -5, -5, 64, 90, 61, 58, 49, 26, 74, -20, -66, 51, -37, 32, 26, 32, 47, 0, 37, -13, -28, -68, 28, -24, -39, -11, -78, 47, -15, 39, -33, -48, 22, 25, 69, 20, 42, 13, -29, 3, 44, -45, -36, 69, 78, 7, -32, -12, 3, 69, -78, 15, 56, -61, 82, 64, 20, -6, 56, 29, -6, -66, 43, -75, -66, -14, 51, 18, 41, 42, -51, 48, -79, -89, 17, -28, 48, -48, 8, -5, -62, 20, 78, -33, -25, -35, -41, -64, -12, -8, 50, 75, -42, -69, 33, 14, 57, -46, -61, 
  -11, 103, -68, -8, -58, 93, 22, -83, 77, -58, 47, -32, -37, -36, -44, -2, 8, -60, 9, -22, -21, -60, -69, 6, -33, -66, 69, 31, 37, 65, -73, 84, -76, -22, 35, 25, -77, 34, 56, 41, 19, -72, 67, -47, -42, 82, 51, 71, 25, 18, 88, 30, -29, 87, 35, 28, 45, 59, -14, -34, -4, 40, 25, 73, -69, 31, 36, -60, 48, -59, -91, 66, -37, 77, 23, 34, 5, 5, 71, 60, 54, 68, -17, -14, -59, 20, 52, -78, -68, 80, -87, -81, -93, -87, -71, -61, -95, -74, -65, 57, -71, -6, -78, 27, 1, 26, -12, 60, 46, -20, 65, 25, 52, -37, -10, 47, 1, 63, -48, 21, 12, 69, -77, -42, -63, 83, -34, -34, -34, 61, -9, -83, -56, -13, 68, -46, 66, -15, 69, 34, -60, -2, -52, 
  27, 34, 35, -80, 59, 45, -24, -13, 40, -65, -83, 85, 5, -30, -84, -50, 20, -11, 68, 4, -7, -20, -15, -46, -35, 82, -71, 24, 74, 3, -27, 37, -34, 37, 60, 28, -10, 14, -70, 26, 48, -68, -58, 63, -23, 8, 72, 47, -57, 79, -84, -61, 23, -57, -22, 1, -73, 32, 56, 30, -11, 69, -43, 91, 79, 81, -87, 12, 7, -84, 38, -54, 43, 90, -57, 84, 41, 47, 73, -9, -36, -18, 64, -26, 48, -4, 43, 36, 35, -17, 74, -11, -79, -18, 10, 39, -14, -75, 84, -65, 68, 59, 41, -79, -53, 42, 20, -66, 4, 40, -7, -19, -65, -28, 79, -52, 53, -82, 55, 47, -27, 7, 68, -65, 62, -58, -48, -34, 59, 88, -32, -75, -24, 35, 30, -53, 60, 14, 40, -41, 36, -46, -4, 
  20, 41, -14, 73, -44, 24, 16, -42, 60, 9, -19, -8, -11, -9, 7, -24, 45, 91, 71, -76, 65, -41, 14, 91, 23, -39, -17, -50, 83, 57, -52, 53, 9, -30, 9, 67, 8, 98, 39, 90, -45, -26, 69, 81, 42, -52, 72, -17, -20, 100, -8, 83, -31, 95, 52, -57, -13, -53, 88, 69, -29, -43, 77, -45, 101, 74, 81, -49, 63, 37, 9, -37, -46, 16, 36, 1, 57, 58, 37, -56, -1, -69, -35, 25, -86, 42, -23, -32, 25, 8, -74, 23, 50, -64, -47, -16, 7, -62, -43, -64, 12, 3, 22, -43, 1, -14, -72, -45, -67, 82, -98, -23, 13, -72, -53, 17, 70, -25, -61, 83, 23, -58, -40, -59, 34, 5, 37, -12, 8, -74, 66, 52, 105, -79, -79, 105, -27, 68, 79, 33, 35, 95, -64, 
  -62, -61, -77, -58, 91, -22, 36, 3, 19, 68, 13, 83, 29, 80, -3, -57, -47, 61, -21, -3, -41, 13, 63, -77, -35, 36, -56, 56, 38, -66, 89, -8, -77, 8, 86, 32, -23, 19, -48, 0, -28, 12, 78, 87, 37, 60, 25, 60, -29, -72, 88, -35, -62, 8, 59, -48, 30, 62, -77, 89, -42, 22, 57, -69, -58, -37, 72, -23, -85, -44, -35, -12, -48, -44, 28, -40, -69, -75, 46, 58, 63, 80, -46, -71, -61, 48, 48, -48, 38, 58, 60, -15, 28, -4, 19, -48, 73, -6, 72, 67, -45, -18, 6, 57, -80, 33, 92, 89, 83, 47, -27, 44, -58, 33, -68, -32, -60, 55, 62, -82, 37, -36, 74, 35, 39, 49, -30, -28, -30, -81, -36, -44, -22, -75, 37, 67, -4, 20, 38, -30, 47, -39, -18, 
  73, 48, -4, -16, 9, 86, 22, 61, 68, 82, -19, 72, 11, -59, -53, 38, 12, 51, 68, 64, 44, -34, -3, 20, 62, -61, -18, 70, -55, 53, -77, 35, -58, -32, 63, -69, 71, 43, 71, -37, -36, -26, -87, -79, -75, -10, -87, 0, -4, 14, -21, -9, 71, 88, 84, -44, 69, 34, -82, 38, -22, -12, 55, 10, 8, 55, 64, -52, 31, 42, -60, -43, 2, 85, -30, 22, -57, 33, -49, -18, -68, -30, 36, 73, 21, -27, 63, 85, -38, -69, -4, 67, 26, -58, -77, -70, -5, 47, -19, -68, -81, -25, 61, -67, 35, 51, -53, 15, 56, -17, 5, -8, -73, -52, 35, -6, -41, 88, -66, -55, 54, 73, 51, 65, 75, 23, 1, -87, -57, 64, 89, 67, 50, 25, 25, 75, -17, 66, 46, -33, 65, -87, 68, 
  8, 36, 37, -87, 29, -63, -6, -44, -39, 49, 0, -65, -88, 79, 58, -113, 12, -32, -98, -32, -107, -42, 55, -26, -31, -44, -94, 6, 45, -58, 32, -66, -49, 42, -90, -36, -67, -46, -106, 53, -39, 8, 0, 45, -29, -42, 42, -47, -36, -3, -58, -47, -55, -90, 59, 32, 17, 21, 9, -11, -96, -55, 15, -28, -41, 51, 78, 74, 82, -64, -77, -63, 30, -1, -66, 68, 9, 26, -46, 42, 14, -1, 84, -4, -45, 62, -49, -12, -13, -26, 76, 50, -60, 26, 15, 82, -79, 56, -65, -84, 65, 93, -24, -57, -37, 59, 23, -15, 41, -6, -51, 66, 32, -43, -9, 76, 25, 40, 69, -81, -27, -4, -23, -55, -29, 54, 39, -70, -56, -7, -13, -64, -54, 10, 90, -73, 46, 51, 42, -20, 20, -87, 85, 
  -20, -5, -26, 26, -29, -57, 19, -16, -2, 34, 86, 51, 9, -43, -12, -6, -90, -81, 14, 62, -109, -57, 10, -80, -57, 38, 19, -1, 58, -51, -104, 50, 13, 0, 34, 43, 53, -90, 5, -113, -50, -23, 37, -53, -74, -9, -76, -15, -20, 38, -84, -60, -41, -38, 60, 20, -44, 102, -116, -84, -31, 9, 87, -31, -20, 42, 30, 57, -91, 74, 67, -72, -2, 29, 78, -68, 31, 21, -29, 86, 20, -48, 46, -15, 50, 44, 54, -52, -60, 85, -21, 52, -60, -19, 39, -11, 51, 51, 60, 31, -74, 6, -42, -101, -17, -68, 36, -23, -91, 73, 71, -88, 73, -6, 15, -65, -54, -89, -70, -59, -65, 2, -66, -5, -91, 5, -45, -9, 29, -49, -61, -9, 30, 59, -10, -63, -61, -12, -16, -67, 69, -84, -38, 
  -66, -103, 97, -59, 22, -47, 40, 66, 1, -48, -56, -27, -84, -14, 12, -18, -60, -48, -31, -44, 11, 23, -62, 25, 66, -2, -67, -11, -38, 4, 5, -24, 51, 37, 46, -76, 14, -19, -97, -43, -7, -70, 43, -90, -43, -9, 43, -78, 61, -15, -76, 10, 38, 44, -3, -58, -67, 18, 31, 32, -102, 68, -6, -20, -94, 3, 51, 76, -61, -77, 65, -11, 72, 6, -23, 27, 73, -9, -24, -2, 44, -79, -34, 44, -31, 55, -16, 49, -69, -49, 28, 91, 60, -65, 53, -4, -82, -19, 3, -59, -40, -34, -92, -29, -64, -68, -42, -67, 69, 73, -98, 56, 36, 14, -33, -43, 42, 15, -34, -74, -26, -43, -17, 27, -10, -83, -94, -85, -55, 59, -69, -27, -36, 16, 52, 27, -59, 20, 57, -39, 45, 5, -25, 
  -51, 88, -20, 31, -21, 77, -50, -36, -10, 72, -43, 46, -32, -18, 95, -59, -2, 65, 62, 69, 26, -35, 27, -92, -25, -23, 60, 41, 16, 15, -78, -69, -73, 48, 38, -42, -22, 53, -8, 65, 73, -51, 65, -13, -28, 34, -89, 89, -27, 58, -7, 55, 23, 33, 26, 50, -39, -38, -17, -75, 51, -39, -59, -28, -9, 42, -48, -78, -92, -36, 62, -25, 12, -55, -46, 56, -47, -37, -62, 76, 7, 74, 45, -56, -36, -91, -51, 34, 46, 82, -83, -16, -7, -43, 31, -12, -90, -47, -14, 11, -32, -76, 20, -41, 9, 74, -39, 3, 27, -11, 92, 57, -95, 59, 76, -44, -50, 85, 65, -63, 24, 96, 64, 64, -1, -12, 7, -17, -68, -53, -47, -12, -43, -1, -12, -29, 1, -20, 57, -48, -65, -26, -91, 
  -66, 75, 52, 15, -4, -1, -10, -42, -11, 27, 3, -71, -50, -79, -57, 42, 61, 42, -73, -11, -41, -79, -40, 66, 55, 34, -19, 10, 87, 82, 6, -16, -8, 55, 22, 24, -8, -29, -69, 35, 23, 86, -50, -65, 38, 27, 44, 62, 84, 22, 77, 69, -15, 25, -22, 12, -72, -13, 5, -38, -38, -30, -20, 82, -21, -29, -13, 30, 4, 86, -34, -68, 58, -14, 21, -81, 71, 22, 48, 85, 43, 87, 34, -83, 31, 43, 3, -60, 34, -23, -81, 72, 75, 49, -50, -43, 74, 59, 89, 60, 89, 53, -79, -8, 31, 16, -80, 34, 35, -2, 61, -45, -48, -75, 28, -52, -78, 26, 16, 73, 27, -85, -23, 80, 40, -2, -34, 36, -54, -59, 79, 53, -36, 56, 87, -82, -73, -13, -27, 80, 22, 48, -63, 
  -42, 1, -80, -72, 79, -35, 13, 65, -48, 10, 12, 34, 15, -24, -15, -29, 0, -18, -48, 67, -82, -21, 46, -68, 80, -8, -65, 82, 48, 43, 49, 13, 15, 17, -77, -77, 83, 19, -68, 20, -64, 60, -63, 71, 80, 80, 56, 79, 12, -61, -33, 61, -38, 82, 86, -62, -7, -23, 38, -69, 71, -18, 61, 71, 79, -23, -31, -38, -6, 22, 69, 63, -81, -74, 45, 70, -70, -30, 55, -79, 63, -83, -34, -83, 66, -2, 82, -73, -41, -61, 12, -63, -67, 73, 89, -44, 58, -61, 54, 47, 26, 91, 81, -43, 12, -16, -16, 45, -18, -37, 60, 72, 72, 19, 48, 47, 19, -41, 92, 37, -7, 36, 36, 91, -32, -48, -54, -28, 0, -45, -36, 34, 83, 84, 80, 58, -44, 48, 88, -18, 85, -78, 74, 
  -40, 0, 62, 100, 77, 55, 20, -60, -11, -1, -85, -42, 94, -8, -27, 77, -15, 1, -64, -10, 68, -58, -10, 100, -79, -55, 81, -14, 29, 5, 59, 55, 78, 35, 62, 50, 53, 15, 49, 71, -18, -79, 38, -19, 100, 77, -53, 43, 59, 35, 23, -69, -43, -28, 34, -43, 54, 17, -56, 58, 25, -26, 88, -55, 78, 32, -66, 78, -69, 44, 23, -52, -11, -78, 72, -60, -56, -50, 48, -54, -73, 40, -45, -86, -92, -52, -3, 15, -42, 17, -53, 75, 12, -49, 11, 70, 6, 79, -22, 18, -46, -48, -29, 77, -47, 42, -51, -32, 25, 35, -52, 86, 70, 72, 16, 38, 64, 59, 32, 61, 14, -55, -57, -45, 85, -30, -83, -38, -71, -67, 74, -86, -13, -32, -78, 17, -40, -5, -57, 84, 45, -35, 71, 
  -25, 40, 61, 42, 18, -3, 1, -75, 78, 80, -21, 67, -6, -26, 73, 29, 20, -82, 25, -13, -27, 50, 76, -77, 60, 82, -2, 82, -78, -87, -83, -63, 89, 46, 28, 12, 70, -41, 46, -20, -68, -36, 82, 34, -50, 13, -12, 63, -39, -88, 76, 62, -27, -26, -31, 2, 73, -78, 14, -31, 23, -63, 25, -65, -48, 71, 83, 60, 12, -52, 66, -50, 8, -35, -75, 58, 46, 22, -25, 71, 0, 76, -17, 17, -75, 88, -6, 72, -80, 51, -26, -1, 43, -76, 51, 72, 26, 87, 89, 78, -18, 23, 61, 46, 60, -49, 10, 7, 6, 52, -56, -80, 87, 86, 23, -88, -36, 81, 57, 42, -16, -3, 55, 56, 49, 82, -57, -19, 86, 73, -89, 76, -21, 53, 52, -33, -31, -8, -44, -10, -65, 10, 62, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 20,143 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0021600804757326841, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[20] = { 0, -51, 0, -64, 0, 67, -11, 91, -50, 2, -14, 0, -85, 26, -36, 122, 0, -42, 72, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00018123282643500715, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[10*20] = { 
  -68, 1, 31, 24, 90, -69, -26, 20, -89, -122, -40, -59, 106, 98, -14, -4, -93, 15, -30, 13, 
  -70, 16, -54, 42, 26, 10, 75, -46, -38, -78, 18, -83, -25, -29, -79, -92, -44, 69, 52, -92, 
  -84, 72, 26, -55, 68, -4, 44, -49, 86, 79, -64, -48, 33, -98, 36, -37, -24, 103, -97, -31, 
  -70, -18, -65, -87, -15, 57, 66, 84, 92, -72, 85, 41, 4, -77, -30, 114, 23, 32, 39, -71, 
  16, 10, -58, -78, -106, 89, -35, -4, -65, 94, 5, -104, -91, 59, 3, 19, 20, -98, 100, 25, 
  65, 96, -85, 17, -74, -20, 9, -16, 99, -118, -105, 101, -76, 74, -31, 88, -92, -10, -90, 75, 
  85, -32, 12, 83, 66, -20, 21, 52, 45, 108, -45, 63, -107, -24, -26, -4, 42, -22, 44, -49, 
  -58, 97, -59, -100, -22, -16, -30, -85, 93, 72, 70, 98, -18, -4, -23, -40, -61, 19, -44, 47, 
  -73, 69, 8, 49, 99, -9, 63, -105, -22, -86, 41, 79, 93, 127, -3, 45, -84, 95, -10, 4, 
  -29, 32, 23, 80, -78, 68, 77, -60, 83, -19, -18, 32, -92, -57, -92, 24, 105, 101, -31, 100, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 10,20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0040260450914502144, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[10] = { 34, 7, -23, 61, 8, 79, 45, 19, -49, 2, };
const TfArray<1, int> tensor_dimension4 = { 1, { 10 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0002915775403380394, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*10] = { 
  -16, -92, -90, 87, 51, -16, 44, 32, -79, -4, 
  64, -10, 86, -73, 40, -7, -5, 39, 69, 7, 
  -127, -8, 5, 53, 60, 40, -29, -10, 23, -56, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0065650427713990211, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[3] = { 28, -39, -10, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00040431244997307658, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.072422817349433899, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.061585653573274612, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.086212635040283203, } };
const TfArray<1, int> quant9_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 143, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 2860, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
